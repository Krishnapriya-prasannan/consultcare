//login patient 

DELIMITER //

CREATE PROCEDURE LoginUser(
    IN input_phone_no VARCHAR(15),
    IN input_dob DATE,
    OUT output_patient_id INT,
    OUT output_message VARCHAR(255)
)
BEGIN
    DECLARE user_exists INT;
    DECLARE patient_status VARCHAR(10);

    -- Check if the user exists with the provided phone number and date of birth
    SELECT COUNT(*) INTO user_exists
    FROM Patient
    WHERE pat_ph_no = input_phone_no AND pat_dob = input_dob;

    -- If user exists, retrieve the patient ID and status
    IF user_exists = 1 THEN
        SELECT pat_id, pat_status INTO output_patient_id, patient_status
        FROM Patient
        WHERE pat_ph_no = input_phone_no AND pat_dob = input_dob;

        -- Check the patient's status
        IF patient_status = 'A' THEN
            SET output_message = 'Login successful';
        ELSEIF patient_status = 'L' THEN
            SET output_message = 'Your account has been deleted. Please contact support if this is an error.';
            SET output_patient_id = NULL; -- Set to NULL since login fails
        END IF;
    ELSE
        -- If no matching user is found
        SET output_message = 'Invalid phone number or date of birth';
        SET output_patient_id = NULL; -- Set to NULL since login fails
    END IF;
END //

DELIMITER ;

// signup and edit patient 

DELIMITER //

CREATE PROCEDURE ManagePatientProfile(
    IN flag VARCHAR(3),                -- 'INS' for insert, 'UPD' for update, 'DEL' for delete
    IN in_pat_id INT,                  -- Patient ID (for update or delete)
    IN in_pat_name VARCHAR(60),        -- Patient Name (for insert or update)
    IN in_pat_dob DATE,                -- Patient Date of Birth (for insert or update)
    IN in_pat_adr VARCHAR(100),        -- Patient Address (for insert or update)
    IN in_pat_ph_no VARCHAR(15),       -- Patient Phone Number (for insert or update)
    IN in_pat_email VARCHAR(60),       -- Patient Email (for insert or update)
    IN in_pat_sex VARCHAR(1),          -- Patient Sex (for insert or update)
    IN in_pat_reg_no VARCHAR(10)     -- Patient Registration Number (for insert or update)
)
BEGIN
    DECLARE existing_phone INT;

    -- If flag is 'INS', check if the phone number already exists
    IF flag = 'INS' THEN
        SELECT COUNT(*) INTO existing_phone 
        FROM Patient 
        WHERE pat_ph_no = in_pat_ph_no;

        IF existing_phone > 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Phone number already exists.';
        ELSE
            INSERT INTO Patient (pat_name, pat_dob, pat_adr, pat_ph_no, pat_email, pat_sex, pat_reg_no, pat_status)
            VALUES (in_pat_name, in_pat_dob, in_pat_adr, in_pat_ph_no, in_pat_email, in_pat_sex, CONCAT('R', AutoGenerate('REG')),'A');
        END IF;

    -- If flag is 'UPD', check if the patient ID exists
    ELSEIF flag = 'UPD' THEN
        SELECT COUNT(*) INTO existing_phone 
        FROM Patient 
        WHERE pat_id = in_pat_id;

        IF existing_phone = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Patient ID does not exist.';
        ELSE
            UPDATE Patient
            SET 
                pat_name = in_pat_name,
                pat_dob = in_pat_dob,
                pat_adr = in_pat_adr,
                pat_ph_no = in_pat_ph_no,
                pat_email = in_pat_email,
                pat_sex = in_pat_sex,
                pat_reg_no = in_pat_reg_no,
                pat_status = 'A'
            WHERE pat_id = in_pat_id;
        END IF;

    -- If flag is 'DEL', mark the patient as deleted
    ELSEIF flag = 'DEL' THEN
        SELECT COUNT(*) INTO existing_phone 
        FROM Patient 
        WHERE pat_id = in_pat_id;

        IF existing_phone = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Patient ID does not exist.';
        ELSE
            UPDATE Patient
            SET 
                pat_status = 'L'  -- 'L' for locked or deleted status
            WHERE pat_id = in_pat_id;
        END IF;
    END IF;
END //

DELIMITER ;


//retrive patient details

DELIMITER //

CREATE PROCEDURE Retrieve_Pat_Details(
    IN input_pat_id INT,
    OUT patient_name VARCHAR(60),
    OUT patient_dob DATE,
    OUT patient_adr VARCHAR(100),
    OUT patient_ph_no VARCHAR(15),
    OUT patient_email VARCHAR(60),
    OUT patient_reg_no VARCHAR(10),  -- Changed to match the table definition
    OUT patient_sex VARCHAR(1),
    OUT patient_status VARCHAR(1)
)
BEGIN
    -- Initialize output variables
    SET patient_name = NULL;
    SET patient_dob = NULL;
    SET patient_adr = NULL;
    SET patient_ph_no = NULL;
    SET patient_email = NULL;
    SET patient_reg_no = NULL;  -- Changed to match the table definition
    SET patient_sex = NULL;
    SET patient_status = NULL;

    -- Query to retrieve patient details based on patient ID
    SELECT 
        p.pat_name, 
        p.pat_dob, 
        p.pat_adr, 
        p.pat_ph_no, 
        p.pat_email, 
        p.pat_reg_no, 
        p.pat_sex,
        p.pat_status
    INTO 
        patient_name, 
        patient_dob, 
        patient_adr, 
        patient_ph_no, 
        patient_email, 
        patient_reg_no,  -- Changed to match the table definition
        patient_sex,
        patient_status
    FROM 
        Patient AS p
    WHERE 
        p.pat_id = input_pat_id; -- Changed to match the column name in the Patient table

    -- Check if patient exists
    IF patient_name IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Patient not found';
    END IF;
END //

DELIMITER ;


// get specialty

DELIMITER $$

CREATE PROCEDURE GetAllSpecialties()
BEGIN
    SELECT DISTINCT stf_speciality 
    FROM Staff 
    WHERE stf_speciality IS NOT NULL AND stf_speciality <> '' AND stf_speciality <> 'N/A' AND stf_type <> 'A' AND stf_speciality <> 'Administration' ;
END $$

DELIMITER ;


get doctors in the specilality

DELIMITER $$

CREATE PROCEDURE GetDoctorsBySpecialty (
    IN specialtyName VARCHAR(255)
)
BEGIN
    SELECT stf_id, stf_name
    FROM Staff
    WHERE stf_speciality = specialtyName AND stf_type <> 'A' AND stf_status <> 'L';  -- Assuming you have a specialty column in your Staff table
END $$

DELIMITER ;

// get available dates 

DELIMITER //
CREATE PROCEDURE GetNextSevenAvailableDates(
    IN doctor_id INT
)
BEGIN
    DECLARE currentDate DATE;  
    DECLARE day_check DATE;
    DECLARE date_count INT DEFAULT 0;

    SET currentDate = CURDATE();  -- Get current date

    -- Create a temporary table to hold the available dates
    CREATE TEMPORARY TABLE IF NOT EXISTS TempAvailableDates (
        available_date DATE
    );

    -- Include the current date as the first entry
    INSERT INTO TempAvailableDates (available_date) VALUES (currentDate);

    WHILE date_count < 7 DO
        SET day_check = DATE_ADD(currentDate, INTERVAL date_count + 1 DAY);  -- Check the next day

        -- Check availability for the doctor on the calculated date, and ensure it's not a holiday
        IF EXISTS (
            SELECT 1
            FROM Availability
            WHERE avail_stf_id = doctor_id
              AND avail_day = DAYNAME(day_check)  
              AND avail_status = 'O'  
        )
        AND NOT EXISTS (
            SELECT 1
            FROM Holiday
            WHERE hol_date = day_check AND hol_type = 'FD'
              AND hol_status = 'A'
        ) THEN
            -- Insert the available date into the temporary table
            INSERT INTO TempAvailableDates (available_date) VALUES (day_check);
        END IF;

        SET date_count = date_count + 1;  -- Increment the date counter
    END WHILE;

    -- Select from the temporary table to return the results
    SELECT available_date FROM TempAvailableDates;

    -- Drop the temporary table (optional)
    DROP TEMPORARY TABLE IF EXISTS TempAvailableDates;
END //
DELIMITER ;

//get time slots 

DELIMITER //

CREATE PROCEDURE ShowAvailableSlots(
    IN in_stf_id INT,         -- Doctor ID selected by the user
    IN in_date DATE           -- Date selected by the user
)
BEGIN
    DECLARE day_name VARCHAR(10);

    -- Get the day name (e.g., Monday, Tuesday) from the input date
    SET day_name = DAYNAME(in_date);

    -- Fetch available 15-minute tokens for the given doctor and day
    SELECT t.tok_id, t.tok_fr_time, t.tok_to_time, t.tok_no, t.tok_status
    FROM Availability a
    JOIN TimeSlot ts ON ts.tsl_avail_id = a.avail_id
    JOIN Token t ON t.tok_time_id = ts.tsl_id
    WHERE a.avail_stf_id = in_stf_id
      AND a.avail_day = day_name
      AND a.avail_status = 'O'        -- Availability status is 'Open'
      AND ts.tsl_status = 'O'         -- Time slot status is 'Open'
      AND t.tok_status = 'A'          -- Token status is 'Available'
    ORDER BY t.tok_fr_time;           -- Order by starting time of the tokens
END //

DELIMITER ;


// tirgger to update the timeslot 

DELIMITER //

CREATE TRIGGER UpdateTimeSlotStatusOnHolidayInsert
AFTER INSERT ON Holiday
FOR EACH ROW
BEGIN
    -- Check if the holiday status is 'A' (Active)
    IF NEW.hol_status = 'A' THEN
        -- Update time slots for MHD type (Morning)
        IF NEW.hol_type = 'MHD' THEN
            UPDATE TimeSlot
            SET tsl_status = 'C'  -- Change status to 'C' (Closed)
            WHERE tsl_avail_id IN (
                SELECT avail_id 
                FROM Availability 
                WHERE avail_stf_id = NEW.hol_stf_id 
                AND avail_day = DAYNAME(NEW.hol_date)
            )
            AND tsl_status = 'O' AND tsl_type = 'MS';  -- Only update open time slots

        -- Update time slots for EHD type (Evening)
        ELSEIF NEW.hol_type = 'EHD' THEN
            UPDATE TimeSlot
            SET tsl_status = 'C'  -- Change status to 'C' (Closed)
            WHERE tsl_avail_id IN (
                SELECT avail_id 
                FROM Availability 
                WHERE avail_stf_id = NEW.hol_stf_id 
                AND avail_day = DAYNAME(NEW.hol_date)
            )
            AND tsl_status = 'O' AND tsl_type = 'ES';  -- Only update open time slots
        END IF;
    END IF;
END //

DELIMITER ;

// to set the slot status back to open

SET GLOBAL event_scheduler = ON;

DELIMITER //

CREATE EVENT UpdateTimeSlotStatus
ON SCHEDULE EVERY 1 DAY -- You can adjust the frequency of this event
DO
BEGIN
    -- Update TimeSlot status to 'O' if the holiday date has passed and the status is 'C'
    UPDATE TimeSlot
    SET tsl_status = 'O'
    WHERE tsl_status = 'C' 
      AND EXISTS (
          SELECT 1
          FROM Holiday h
          WHERE h.hol_stf_id = TimeSlot.tsl_avail_id  -- Assuming tsl_avail_id corresponds to the staff ID in Holiday
            AND h.hol_date < CURDATE()  -- Check if the holiday date is in the past
            AND h.hol_status = 'A'  -- Only consider holidays with status 'A'
      );
END //

DELIMITER ;

//book appointment

DELIMITER $$

CREATE PROCEDURE BookAppointment(
    IN p_doctorId INT,
    IN p_patientId INT,
    IN p_appointmentDate DATE,
    IN p_timeSlot VARCHAR(50),
    IN p_tokenNumber INT
)
BEGIN
    DECLARE v_timeSlotId INT;
    DECLARE v_availabilityId INT;

    -- Start a transaction
    START TRANSACTION;

    -- Insert into Appointment table
    INSERT INTO Appointment (appt_stf_id, appt_pat_id, appt_date, appt_time_slt, appt_tok_no, appt_status)
    VALUES (p_doctorId, p_patientId, p_appointmentDate, 
            STR_TO_DATE(SUBSTRING_INDEX(p_timeSlot, ' - ', 1), '%H:%i:%s'),
            p_tokenNumber, 'B');

    -- Find the timeSlot ID and availability ID from TimeSlot and Availability tables
    SELECT tsl.tsl_id, tsl.tsl_avail_id
    INTO v_timeSlotId, v_availabilityId
    FROM TimeSlot tsl
    INNER JOIN availability av ON tsl.tsl_avail_id = av.avail_id
    WHERE av.avail_stf_id = p_doctorId
      AND tsl.tsl_fr_time = STR_TO_DATE(SUBSTRING_INDEX(p_timeSlot, ' - ', 1), '%H:%i:%s')
      AND tsl.tsl_to_time = STR_TO_DATE(SUBSTRING_INDEX(p_timeSlot, ' - ', -1), '%H:%i:%s')
      AND av.avail_day = DAYNAME(p_appointmentDate);

    -- Set the corresponding token's status as 'B' (Booked) in the Token table
    UPDATE Token
    SET tok_status = 'B'
    WHERE tok_time_id = v_timeSlotId
      AND tok_no = p_tokenNumber;

    COMMIT;

END $$

DELIMITER ;

// display appointments 

DELIMITER //

CREATE PROCEDURE GetAppointmentsByPatientId (
    IN patientId INT,
    IN flag INT
)
BEGIN
    IF flag = 1 THEN
        -- Return all appointments for the patient
        SELECT 
            a.appt_id AS appointment_id,
            a.appt_date AS appointment_date,
            a.appt_time_slt AS time_slot,
            s.stf_name AS doctor_name,
            a.appt_tok_no AS token_number,
            a.appt_remarks AS remarks,
            a.appt_status AS status
        FROM 
            Appointment a
        JOIN 
            Staff s ON a.appt_stf_id = s.stf_id
        WHERE 
            a.appt_pat_id = patientId
        ORDER BY 
            a.appt_id DESC;  -- Order by ID, most recent first

    ELSEIF flag = 2 THEN
        -- Return only appointments with status 'B'
        SELECT 
            a.appt_id AS appointment_id,
            a.appt_date AS appointment_date,
            a.appt_time_slt AS time_slot,
            s.stf_name AS doctor_name,
            a.appt_tok_no AS token_number,
            a.appt_remarks AS remarks,
            a.appt_status AS status
        FROM 
            Appointment a
        JOIN 
            Staff s ON a.appt_stf_id = s.stf_id
        WHERE 
            a.appt_pat_id = patientId
            AND a.appt_status = 'B'
        ORDER BY 
            a.appt_id DESC;  -- Order by ID, most recent first

    ELSEIF flag = 3 THEN
        -- Return only appointments with status 'F' that have corresponding medications
        SELECT 
            a.appt_id AS appointment_id,
            a.appt_date AS appointment_date,
            a.appt_time_slt AS time_slot,
            s.stf_name AS doctor_name,
            a.appt_tok_no AS token_number,
            a.appt_remarks AS remarks,
            a.appt_status AS status
        FROM 
            Appointment a
        JOIN 
            Staff s ON a.appt_stf_id = s.stf_id
        JOIN 
            Medication m ON a.appt_id = m.med_appt_id  -- Join with Medication table
        WHERE 
            a.appt_pat_id = patientId
            AND a.appt_status = 'F'
        GROUP BY 
            a.appt_id  -- Group by appointment ID to avoid duplicates
        ORDER BY 
            a.appt_id DESC;  -- Order by ID, most recent first
    END IF;
END//

DELIMITER ;

//cancel appointment

SET SQL_SAFE_UPDATES = 0;
DELIMITER $$

CREATE PROCEDURE CancelAppointment (
    IN p_appt_id INT -- Appointment ID to cancel
)
BEGIN
    DECLARE v_existing_time_slot TIME;
    DECLARE v_existing_token_number INT;

    -- Fetch existing appointment details
    SELECT 
        appt_time_slt, 
        appt_tok_no
    INTO 
        v_existing_time_slot, 
        v_existing_token_number
    FROM Appointment
    WHERE appt_id = p_appt_id;

    -- Mark appointment as canceled and set the token as open
    UPDATE Appointment
    SET appt_status = 'C' -- Mark appointment as canceled
    WHERE appt_id = p_appt_id;

    UPDATE Token
    SET tok_status = 'A' -- Mark token as available
    WHERE tok_no = v_existing_token_number;
END$$

DELIMITER ;

//edit appointment

SET SQL_SAFE_UPDATES = 0;
DELIMITER $$

CREATE PROCEDURE UpdateAppointment (
    IN p_appt_id INT,              -- Appointment ID to update
    IN p_doctorId INT,             -- Doctor ID (Staff ID)
    IN p_patientId INT,            -- Patient ID
    IN p_appointmentDate DATE,     -- New appointment date
    IN p_timeSlot TIME,            -- New time slot (matching TIME type)
    IN p_tokenNumber INT           -- New token number
)
BEGIN
    DECLARE v_existing_token_number INT;

    -- Fetch existing appointment details
    SELECT appt_tok_no
    INTO v_existing_token_number
    FROM Appointment
    WHERE appt_id = p_appt_id;

    -- Mark the previous token as available ('A')
    UPDATE Token
    SET tok_status = 'A' -- Mark the previous token as available
    WHERE tok_no = v_existing_token_number;

    -- Update the appointment with the new values
    UPDATE Appointment
    SET appt_stf_id = p_doctorId,           -- Update doctor ID
        appt_pat_id = p_patientId,          -- Update patient ID
        appt_date = p_appointmentDate,      -- Update appointment date
        appt_time_slt = p_timeSlot,         -- Update appointment time slot
        appt_tok_no = p_tokenNumber          -- Update token number
    WHERE appt_id = p_appt_id;

    -- Mark the new token as booked ('B')
    UPDATE Token
    SET tok_status = 'B' -- Mark the new token as booked
    WHERE tok_no = p_tokenNumber;
END$$

DELIMITER ;

// display prescriptions

DELIMITER $$

CREATE PROCEDURE GetMedicinesByAppointmentId(
    IN apptId INT
)
BEGIN
    -- Select medicines related to the given appointment ID
    SELECT 
        med_id AS medicine_id,
        med_name AS medicine_name,
        med_dosage AS dosage,
        med_duration AS duration,
        med_instruction AS instruction,
        med_remarks AS remarks
    FROM 
        Medication
    WHERE 
        med_appt_id = apptId;
END$$

DELIMITER ;


//staff login

DELIMITER //

CREATE PROCEDURE LoginStaff(IN staffUsername VARCHAR(255))
BEGIN
    DECLARE staff_pswd VARCHAR(255);
    DECLARE staff_status CHAR(1);   -- Status will be 'A' or 'L'
    DECLARE staff_type CHAR(1);     -- Staff type will be 'A' (Admin) or 'D' (Doctor)
    DECLARE msg VARCHAR(255);

    -- Fetch the staff password, status, and type
    SELECT stf_pswd, stf_status, stf_type INTO staff_pswd, staff_status, staff_type
    FROM Staff
    WHERE stf_username = staffUsername;

    -- Check if the staff exists and status is active
    IF staff_pswd IS NULL THEN
        SET msg = 'Invalid credentials.';
    ELSEIF staff_status = 'L' THEN
        SET msg = 'Account is locked.';
    ELSEIF staff_status = 'A' THEN
        SET msg = 'Login successful.';
    END IF;

    -- Set output parameters
    SET @staff_type = staff_type;
    SET @message = msg;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE GetDoctorDetails(IN doctorId INT)
BEGIN
    SELECT stf_id, stf_name,stf_username, stf_speciality, stf_email, stf_ph_no, 
           stf_qualification, stf_experience, stf_sex, stf_img_path,stf_pswd
    FROM Staff
    WHERE stf_id = doctorId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE UpdateDoctorPassword(IN doctorId INT, IN newPassword VARCHAR(100))
BEGIN
    UPDATE Staff
    SET stf_pswd = newPassword
    WHERE stf_id = doctorId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE GetAdminDetails(IN adminId INT)
BEGIN
    SELECT stf_id, stf_name,stf_username, stf_speciality, stf_email, stf_ph_no, 
           stf_qualification, stf_experience, stf_sex, stf_img_path,stf_pswd
    FROM Staff
    WHERE stf_id = adminId;
END //
DELIMITER ;


DELIMITER //

CREATE PROCEDURE updateAdminDetails(
    IN adminId INT,
    IN adminName VARCHAR(60),
    IN adminUsername VARCHAR(50),
    IN adminSex VARCHAR(1),
    IN adminEmail VARCHAR(60),
    IN adminPhoneNo VARCHAR(15),
    IN adminSpeciality VARCHAR(50),
    IN adminPassword VARCHAR(100),
    IN adminExperience VARCHAR(500),
    IN adminQualification VARCHAR(100)
)
BEGIN
    UPDATE Staff
    SET stf_name = adminName,
        stf_username = adminUsername,
        stf_sex = adminSex,
        stf_email = adminEmail,
        stf_ph_no = adminPhoneNo,
        stf_speciality = adminSpeciality,
        stf_pswd = adminPassword,
        stf_experience = adminExperience,
        stf_qualification = adminQualification
    WHERE stf_id = adminId;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GetPatientsByDoctor(IN staff_id INT)
BEGIN
    SELECT p.pat_reg_no AS regNo,
           p.pat_name AS name,
           TIMESTAMPDIFF(YEAR, p.pat_dob, CURDATE()) AS age,
           p.pat_sex AS sex,
           p.pat_ph_no AS phoneNumber
    FROM Patient p
    JOIN Appointment a ON p.pat_id = a.appt_pat_id
    WHERE a.appt_stf_id = staff_id 
    AND p.pat_status = 'A'
    GROUP BY p.pat_id;
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE GetTodayAppointments(IN staffId INT)
BEGIN
    SELECT 
        a.appt_tok_no AS tokenNo,
        p.pat_reg_no AS regNo,
        p.pat_name AS name,
        YEAR(CURDATE()) - YEAR(p.pat_dob) AS age,
        p.pat_sex AS sex
    FROM 
        Appointment a
    JOIN 
        Patient p ON a.appt_pat_id = p.pat_id
    WHERE 
        a.appt_stf_id = staffId 
        AND a.appt_date = CURDATE() 
        AND a.appt_status = 'B'
        AND p.pat_status = 'A'
    ORDER BY 
        a.appt_tok_no;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE CreateLeave(
    IN p_stf_id INT,
    IN p_hol_date DATE,
    IN p_hol_type VARCHAR(3),
    IN p_hol_reason VARCHAR(200)
)
BEGIN
    INSERT INTO Holiday (hol_stf_id, hol_date, hol_type, hol_reason, hol_status) 
    VALUES (p_stf_id, p_hol_date, p_hol_type, p_hol_reason, 'W');
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE GetLeaveHistory(
    IN p_stf_id INT
)
BEGIN
    SELECT * FROM Holiday WHERE hol_stf_id = p_stf_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UpdateLeave(
    IN p_hol_id INT,
    IN p_hol_type VARCHAR(3),
    IN p_hol_date DATE,
    IN p_hol_reason VARCHAR(200)
)
BEGIN
    UPDATE Holiday
    SET hol_type = p_hol_type, hol_date = p_hol_date, hol_reason = p_hol_reason, hol_status = 'W'
    WHERE hol_id = p_hol_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE DeleteLeave(
    IN p_hol_id INT
)
BEGIN
    DELETE FROM Holiday WHERE hol_id = p_hol_id;
END //
DELIMITER ;
 

 DELIMITER //
CREATE PROCEDURE GetAllLeaves()
BEGIN
    SELECT h.hol_id, h.hol_date, h.hol_type, h.hol_reason, h.hol_status, s.stf_name
    FROM Holiday h
    JOIN Staff s ON h.hol_stf_id = s.stf_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ApproveRejectLeave(
    IN p_hol_id INT,
    IN p_status VARCHAR(10)
)
BEGIN
    UPDATE Holiday
    SET hol_status = p_status
    WHERE hol_id = p_hol_id;
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE GetLeavesByStatus(IN leaveStatus VARCHAR(20))
BEGIN
  SELECT h.hol_id, h.hol_date, h.hol_type, h.hol_reason, h.hol_status, s.stf_name
    FROM Holiday h
    JOIN Staff s ON h.hol_stf_id = s.stf_id WHERE h.hol_status = leaveStatus;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE AddNewChart(
    IN patientRegNo VARCHAR(10),
    IN doctorId INT,
    IN appointmentDate DATE,
    IN apptTokNo INT,
    IN patientCondition TEXT,
    IN diagnosis TEXT,
    IN remarks TEXT,
    IN medName VARCHAR(100),
    IN medDosage VARCHAR(50),
    IN medDuration VARCHAR(30),
    IN medInstruction TINYTEXT,
    IN medRemarks TINYTEXT
)
BEGIN
    DECLARE new_cons_id INT;
    DECLARE patientId INT;
    DECLARE apptId INT;
    -- Get patient ID from the Patient table based on the patient registration number
    SELECT pat_id INTO patientId 
    FROM Patient 
    WHERE pat_reg_no = patientRegNo;

    -- Check if the appointment exists
    SELECT appt_id INTO apptId
    FROM Appointment 
    WHERE appt_date = appointmentDate 
      AND appt_pat_id = patientId 
      AND appt_stf_id = doctorId
      AND appt_tok_no = apptTokNo
    LIMIT 1;

    -- Debug: Check if appointment exists
    IF apptId IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Appointment does not exist';
    END IF;

    -- Check if a consultation already exists for this appointment
    SELECT cons_id INTO new_cons_id
    FROM Consultation
    WHERE cons_appt_id = apptId
    LIMIT 1;

    -- If no consultation exists, insert a new one
    IF new_cons_id IS NULL THEN
        INSERT INTO Consultation (cons_appt_id, cons_stf_id, cons_pat_id, cons_pat_condition, cons_diagnosis, cons_remarks)
        VALUES (apptId, doctorId, patientId, patientCondition, diagnosis, remarks);
        
        -- Get the last inserted consultation ID
        SET new_cons_id = LAST_INSERT_ID();
    END IF;

    -- Insert into Medication table, associating with the existing or newly created consultation
    INSERT INTO Medication (med_cons_id, med_appt_id, med_name, med_dosage, med_duration, med_instruction, med_remarks)
    VALUES (new_cons_id, apptId, medName, medDosage, medDuration, medInstruction, medRemarks);
END //

DELIMITER ;



DELIMITER //

CREATE TRIGGER after_consultation_insert
AFTER INSERT ON Consultation
FOR EACH ROW
BEGIN
    -- Update the appointment status from 'B' to 'F' for the corresponding appointment
    UPDATE Appointment
    SET appt_status = 'F'
    WHERE appt_id = NEW.cons_appt_id AND appt_status = 'B';
END;

//

DELIMITER ;


DELIMITER //
CREATE PROCEDURE GetPatientId(
    IN p_reg_no VARCHAR(10)
)
BEGIN
    SELECT pat_id FROM Patient WHERE pat_reg_no = p_reg_no;
END //
DELIMITER ;